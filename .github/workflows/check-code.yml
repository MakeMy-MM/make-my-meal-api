name: CI

on: push

jobs:
  # phpunit:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       php: [8.4]
# services:
#   postgres:
#     image: postgres:10.8
#     env:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: postgres
#       POSTGRES_DB: test
#     ports:
#     - 5432:5432
#     options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Install dependencies
  #       run: |
  #         docker run --name phpunit -d \
  #           -v $(pwd):/var/www/html \
  #           -w /var/www/html \
  #           composer:latest \
  #           bash -c "composer install --ignore-platform-reqs"

  #     - name: Start PostgreSQL container
  #       run: |
  #         docker run --name postgres -e POSTGRES_PASSWORD=root -e POSTGRES_DB=make_my_test -d postgres:13

  #     - name: Wait for PostgreSQL to be ready
  #       run: |
  #         until docker exec postgres pg_isready -U root; do
  #           echo "Waiting for PostgreSQL to be ready...";
  #           sleep 2;
  #         done

  #     - name: Run migrations
  #       run: |
  #         docker exec phpunit bash -c "cp .env.example .env && \
  #                    sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=pgsql/' .env && \
  #                    sed -i 's/DB_HOST=127.0.0.1/DB_HOST=postgres/' .env && \
  #                    sed -i 's/DB_PASSWORD=/DB_PASSWORD=root/' .env && \
  #                    php artisan migrate --force"

  #     - name: Run tests
  #       run: |
  #         docker exec phpunit bash -c "./vendor/bin/phpunit"

  #     - name: Stop and clean up containers
  #       if: always()
  #       run: |
  #         docker stop postgres phpunit
  #         docker rm postgres phpunit

  pint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t pint .

      - name: Run Composer Install
        run: |
          docker exec pint \
          -v ${{ github.workspace }}:/var/www \
          username/php-composer:8.4 composer install

      # - name: Install dependencies
      #   run: |
      #     docker exec pint bash -c "git config --global --add safe.directory /var/www/html && composer install --ignore-platform-reqs"

      # - name: Show folders
      #   run: docker exec pint bash -c "ls -l"

      # - name: Debug dependencies
      #   run: |
      #     docker exec pint bash -c "ls -l ./vendor"


      # - name: Run Pint
      #   run: |
      #     docker exec pint bash -c "./vendor/bin/pint --test"

      # - name: Stop and clean up containers
      #   if: always()
      #   run: |
      #     docker stop pint
      #     docker rm pint
